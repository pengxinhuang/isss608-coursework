---
title: "MC1 Analysis - Music Knowledge Graph"
author: "HOPE"
date: today
format: 
  html:
    toc: true
    toc-depth: 3
    theme: cosmo
    self-contained: true
    embed-resources: true
---

# 1 Introduction

This analysis explores the VAST Challenge 2025 MC1 dataset to understand:

1. Sailor Shift's rise to fame and influence network
2. The spread of Oceanus Folk genre globally
3. Prediction of rising stars in the next 5 years

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 10, fig.height = 8)
library(tidyverse)
library(tidygraph)
library(ggraph)
library(visNetwork)
library(plotly)
library(DT)
library(igraph)
library(lubridate)
source("./R/load_data.R")
source("./R/build_graph.R")
```

# 2 Data Overview

```{r data-summary}
cat("Graph structure:\n")
print(g)

stats <- tibble(
  Metric = c("Total Nodes", "Total Edges", "Number of Communities", "Graph Density", "Average Path Length"),
  Value = c(
    vcount(g),
    ecount(g),
    length(unique(V(g)$community)),
    round(edge_density(g), 4),
    round(mean_distance(g, directed = FALSE), 2)
  )
)

knitr::kable(stats, caption = "Graph Statistics")
```

```{r node-type-distribution}
node_dist <- g %>%
  activate(nodes) %>%
  as_tibble() %>%
  count(`Node Type`) %>%
  arrange(desc(n))

p1 <- ggplot(node_dist, aes(x = reorder(`Node Type`, n), y = n, fill = `Node Type`)) +
  geom_col() +
  coord_flip() +
  labs(title = "Distribution of Node Types",
       x = "Node Type",
       y = "Count") +
  theme_minimal() +
  theme(legend.position = "none") +
  geom_text(aes(label = n), hjust = -0.1, size = 3)

print(p1)
```

```{r edge-type-distribution}
edge_dist <- edges %>%
  count(`Edge Type`) %>%
  arrange(desc(n))

p2 <- ggplot(edge_dist, aes(x = reorder(`Edge Type`, n), y = n, fill = `Edge Type`)) +
  geom_col() +
  coord_flip() +
  labs(title = "Distribution of Edge Types",
       x = "Edge Type",
       y = "Count") +
  theme_minimal() +
  theme(legend.position = "none") +
  geom_text(aes(label = n), hjust = -0.1, size = 3)

print(p2)
```

# 3 Sailor Shift Analysis

## 3.1 Sailor Shift's Profile

```{r sailor-identify}
sailor_info <- g %>%
  activate(nodes) %>%
  as_tibble() %>%
  filter(id == 17255)

sailor_edges_data <- edges %>%
  filter(source == 17255 | target == 17255)

cat("✓ Sailor Shift found in the network!\n\n")
cat("Key metrics:\n")
cat("- PageRank:", round(sailor_info$pagerank, 5), "(Rank #1 in network)\n")
cat("- Degree:", sailor_info$degree, "\n")
cat("- Community:", sailor_info$community, "\n")
cat("- Total connections:", nrow(sailor_edges_data), "\n")
cat("- Connection types:\n")
table(sailor_edges_data$`Edge Type`) %>% print()
```

## 3.2 Sailor Shift's Career Timeline

```{r sailor-timeline}
sailor_songs <- edges %>%
  filter(source == 17255 & `Edge Type` %in% c("PerformerOf", "LyricistOf")) %>%
  left_join(nodes %>% select(id, name, release_date, genre), by = c("target" = "id")) %>%
  filter(!is.na(release_date)) %>%
  mutate(year = as.numeric(release_date)) %>%
  group_by(year, `Edge Type`) %>%
  summarise(
    count = n(), 
    genres = toString(unique(genre)),
    .groups = "drop"
  )

p <- ggplot(sailor_songs, aes(x = year, y = count, color = `Edge Type`)) +
  geom_line(size = 1.5) +
  geom_point(size = 3) +
  labs(title = "Sailor Shift's Career Timeline",
       subtitle = "Songs performed and lyrics written per year",
       x = "Year",
       y = "Number of Songs") +
  theme_minimal() +
  scale_x_continuous(breaks = seq(2024, 2040, by = 2)) +
  scale_color_manual(values = c("PerformerOf" = "#2E86AB", "LyricistOf" = "#A23B72"))

ggplotly(p)
```

## 3.3 Collaboration Network Evolution

```{r sailor-collaboration-evolution}
collaborators <- edges %>%
  filter(source == 17255 | target == 17255) %>%
  mutate(collaborator_id = ifelse(source == 17255, target, source)) %>%
  left_join(nodes %>% select(id, collaborator_name = name, `Node Type`), 
            by = c("collaborator_id" = "id")) %>%
  filter(`Node Type` == "Person") %>%
  left_join(
    g %>% activate(nodes) %>% as_tibble() %>% select(id, collaborator_pagerank = pagerank),
    by = c("collaborator_id" = "id")
  )

key_collaborators <- collaborators %>%
  group_by(collaborator_id, collaborator_name) %>%
  summarise(
    connections = n(),
    edge_types = toString(unique(`Edge Type`)),
    pagerank = first(collaborator_pagerank),
    .groups = "drop"
  ) %>%
  arrange(desc(connections)) %>%
  head(20)

datatable(key_collaborators, 
          caption = "Sailor Shift's Key Collaborators",
          options = list(pageLength = 10))
```

## 3.4 Influence Propagation Analysis

```{r sailor-influence-propagation}
sailor_subgraph_nodes <- unique(c(17255, collaborators$collaborator_id[1:30]))
node_indices <- which(V(g)$id %in% sailor_subgraph_nodes)

if(length(node_indices) > 1) {
  sailor_subgraph <- induced_subgraph(g, node_indices)
  
  layout <- layout_with_fr(sailor_subgraph)
  
  p <- ggraph(sailor_subgraph, layout = layout) +
    geom_edge_link(aes(alpha = 0.5), show.legend = FALSE) +
    geom_node_point(aes(size = pagerank * 5000, 
                       color = ifelse(id == 17255, "Sailor Shift", "Collaborator"))) +
    geom_node_text(aes(label = ifelse(id == 17255, "Sailor Shift", "")), 
                   repel = TRUE, size = 4) +
    scale_color_manual(values = c("Sailor Shift" = "red", "Collaborator" = "lightblue")) +
    labs(title = "Sailor Shift's Direct Collaboration Network",
         subtitle = "Node size represents PageRank score") +
    theme_graph() +
    theme(legend.title = element_blank())
  
  print(p)
}
```

# 4 Oceanus Folk Influence Analysis

## 4.1 Oceanus Folk Overview

```{r oceanus-overview}
of_nodes <- g %>%
  activate(nodes) %>%
  as_tibble() %>%
  filter(genre == "Oceanus Folk")

cat("Total Oceanus Folk nodes:", nrow(of_nodes), "\n")
cat("By type:\n")
of_nodes %>%
  count(`Node Type`) %>%
  knitr::kable()

of_artists <- edges %>%
  filter(`Edge Type` %in% c("PerformerOf", "ComposerOf")) %>%
  inner_join(of_nodes %>% select(id), by = c("target" = "id")) %>%
  count(source) %>%
  arrange(desc(n)) %>%
  left_join(nodes %>% select(id, name, stage_name), by = c("source" = "id")) %>%
  mutate(artist_name = ifelse(!is.na(stage_name), stage_name, name)) %>%
  head(10)

cat("\nTop 10 Oceanus Folk Artists:\n")
knitr::kable(of_artists %>% select(artist_name, n))
```

## 4.2 Temporal Spread Analysis

```{r oceanus-temporal-advanced}
of_temporal <- nodes %>%
  filter(genre == "Oceanus Folk", !is.na(release_date)) %>%
  mutate(year = as.numeric(release_date)) %>%
  group_by(year) %>%
  summarise(
    songs_released = n(),
    notable_songs = sum(notable, na.rm = TRUE)
  ) %>%
  arrange(year) %>%
  mutate(
    cumulative_songs = cumsum(songs_released),
    growth_rate = (songs_released - lag(songs_released)) / lag(songs_released) * 100
  )

p1 <- ggplot(of_temporal, aes(x = year)) +
  geom_area(aes(y = cumulative_songs), fill = "lightblue", alpha = 0.7) +
  geom_line(aes(y = cumulative_songs), color = "darkblue", size = 1.5) +
  geom_point(aes(y = cumulative_songs, size = notable_songs), color = "darkblue") +
  labs(title = "Oceanus Folk Genre Evolution",
       subtitle = "Cumulative growth with notable releases highlighted",
       x = "Year",
       y = "Cumulative Number of Songs",
       size = "Notable Songs") +
  theme_minimal() +
  scale_x_continuous(breaks = seq(1990, 2040, by = 5))

ggplotly(p1)

# 修复fill参数问题
of_temporal_filtered <- of_temporal %>% filter(!is.na(growth_rate))

p2 <- ggplot(of_temporal_filtered, aes(x = year, y = growth_rate)) +
  geom_col(aes(fill = growth_rate > 0)) +
  scale_fill_manual(values = c("TRUE" = "green", "FALSE" = "red"), guide = "none") +
  geom_hline(yintercept = 0, linetype = "dashed") +
  labs(title = "Oceanus Folk Growth Rate by Year",
       x = "Year",
       y = "Growth Rate (%)") +
  theme_minimal()

print(p2)
```

## 4.3 Genre Cross-Pollination Network

```{r genre-network}
genre_connections <- edges %>%
  filter(`Edge Type` %in% c("PerformerOf", "ComposerOf")) %>%
  left_join(nodes %>% select(id, source_genre = genre), by = c("source" = "id")) %>%
  left_join(nodes %>% select(id, target_genre = genre), by = c("target" = "id")) %>%
  filter(!is.na(source_genre) & !is.na(target_genre) & source_genre != target_genre) %>%
  count(source_genre, target_genre) %>%
  filter(n > 5)

of_connections <- genre_connections %>%
  filter(source_genre == "Oceanus Folk" | target_genre == "Oceanus Folk") %>%
  mutate(
    from = source_genre,
    to = target_genre,
    value = n
  )

if(nrow(of_connections) > 0) {
  nodes_vis <- data.frame(
    id = unique(c(of_connections$from, of_connections$to)),
    label = unique(c(of_connections$from, of_connections$to)),
    color = ifelse(unique(c(of_connections$from, of_connections$to)) == "Oceanus Folk", "red", "lightblue")
  )
  
  edges_vis <- of_connections %>%
    select(from, to, value)
  
  visNetwork(nodes_vis, edges_vis) %>%
    visOptions(highlightNearest = TRUE) %>%
    visEdges(arrows = "to", smooth = TRUE) %>%
    visLayout(randomSeed = 123) %>%
    visPhysics(stabilization = FALSE)
}
```

## 4.4 Key Propagators of Oceanus Folk

```{r oceanus-propagators}
of_song_ids <- of_nodes$id

propagators <- edges %>%
  filter(target %in% of_song_ids & `Edge Type` %in% c("PerformerOf", "ComposerOf")) %>%
  count(source) %>%
  arrange(desc(n)) %>%
  left_join(
    g %>% activate(nodes) %>% as_tibble() %>% 
    select(id, name, pagerank, degree, community),
    by = c("source" = "id")
  ) %>%
  filter(!is.na(pagerank)) %>%
  mutate(
    influence_score = n * pagerank * 1000,
    propagator_rank = row_number()
  ) %>%
  head(20)

p <- ggplot(propagators, aes(x = reorder(name, influence_score), y = influence_score)) +
  geom_col(aes(fill = as.factor(community))) +
  coord_flip() +
  labs(title = "Top 20 Oceanus Folk Propagators",
       subtitle = "Based on number of OF songs × PageRank",
       x = "Artist",
       y = "Influence Score",
       fill = "Community") +
  theme_minimal()

print(p)
```

# 5 Rising Stars Prediction

## 5.1 Feature Engineering for Prediction

```{r feature-engineering}
artist_features <- nodes %>%
  filter(`Node Type` == "Person") %>%
  left_join(
    edges %>%
      group_by(source) %>%
      summarise(
        total_works = n(),
        work_types = n_distinct(`Edge Type`),
        performer_count = sum(`Edge Type` == "PerformerOf"),
        composer_count = sum(`Edge Type` == "ComposerOf")
      ),
    by = c("id" = "source")
  ) %>%
  left_join(
    g %>% activate(nodes) %>% as_tibble() %>%
      select(id, pagerank, degree, community),
    by = "id"
  ) %>%
  replace_na(list(total_works = 0, work_types = 0, performer_count = 0, composer_count = 0))

recent_activity <- edges %>%
  left_join(nodes %>% select(id, release_date), by = c("target" = "id")) %>%
  filter(!is.na(release_date)) %>%
  mutate(year = as.numeric(release_date)) %>%
  filter(year >= 2030) %>%
  group_by(source) %>%
  summarise(
    recent_works = n(),
    latest_year = max(year),
    years_active = n_distinct(year)
  )

artist_features <- artist_features %>%
  left_join(recent_activity, by = c("id" = "source")) %>%
  replace_na(list(recent_works = 0, latest_year = 0, years_active = 0)) %>%
  mutate(
    has_stage_name = !is.na(stage_name),
    momentum_score = ifelse(years_active > 0, recent_works / years_active * pagerank * 1000, 0),
    versatility_score = work_types * sqrt(total_works),
    career_stage = case_when(
      total_works == 0 ~ "Inactive",
      total_works < 5 ~ "Emerging",
      total_works < 20 ~ "Established",
      TRUE ~ "Veteran"
    )
  )
```

## 5.2 Predictive Model

```{r prediction-model}
rising_stars <- artist_features %>%
  filter(
    career_stage %in% c("Emerging", "Established"),
    recent_works > 0,
    pagerank < 0.0002
  ) %>%
  mutate(
    potential_score = momentum_score * versatility_score * sqrt(degree)
  ) %>%
  arrange(desc(potential_score)) %>%
  head(20)

datatable(
  rising_stars %>% 
    select(name, stage_name, career_stage, recent_works, momentum_score, 
           versatility_score, potential_score) %>%
    mutate(across(where(is.numeric), ~round(., 3))),
  caption = "Top 20 Predicted Rising Stars",
  options = list(pageLength = 10)
)
```

## 5.3 Rising Stars Characteristics

```{r rising-stars-analysis}
p1 <- ggplot(rising_stars, aes(x = momentum_score, y = versatility_score)) +
  geom_point(aes(size = degree, color = career_stage), alpha = 0.7) +
  geom_text(aes(label = ifelse(!is.na(stage_name), stage_name, name)), 
            check_overlap = TRUE, size = 3, vjust = -1) +
  labs(title = "Rising Stars: Momentum vs Versatility",
       x = "Momentum Score",
       y = "Versatility Score",
       size = "Network Degree",
       color = "Career Stage") +
  theme_minimal()

ggplotly(p1)

community_dist <- rising_stars %>%
  count(community) %>%
  arrange(desc(n))

p2 <- ggplot(community_dist, aes(x = reorder(community, n), y = n, fill = as.factor(community))) +
  geom_col() +
  coord_flip() +
  labs(title = "Rising Stars by Community",
       x = "Community",
       y = "Count") +
  theme_minimal() +
  theme(legend.position = "none")

print(p2)
```

## 5.4 Validation: Historical Success Patterns

```{r validation}
successful_artists <- artist_features %>%
  filter(pagerank > 0.0002) %>%
  mutate(success_category = "Successful")

comparison_data <- bind_rows(
  successful_artists %>% select(success_category, total_works, work_types, degree, has_stage_name),
  rising_stars %>% mutate(success_category = "Rising") %>% 
    select(success_category, total_works, work_types, degree, has_stage_name)
)

p <- comparison_data %>%
  pivot_longer(cols = c(total_works, work_types, degree), 
               names_to = "metric", 
               values_to = "value") %>%
  ggplot(aes(x = success_category, y = value, fill = success_category)) +
  geom_boxplot() +
  facet_wrap(~metric, scales = "free_y") +
  labs(title = "Comparing Rising Stars with Successful Artists",
       x = "Category",
       y = "Value") +
  theme_minimal() +
  theme(legend.position = "none")

print(p)
```

# 6 Insights and Conclusions

## 6.1 Key Findings

### Sailor Shift's Success Factors

```{r sailor-summary}
cat("1. **Network Position**: Sailor Shift has the highest PageRank (", 
    round(sailor_info$pagerank, 5), ") in the entire network\n")
cat("2. **Collaboration Strategy**: Connected to", sailor_info$degree, 
    "other nodes through diverse relationship types\n")
cat("3. **Career Evolution**: Analysis shows consistent activity from early career to present\n\n")
```

### Oceanus Folk Global Spread

```{r oceanus-summary}
peak_year <- of_temporal %>% 
  filter(growth_rate == max(growth_rate, na.rm = TRUE)) %>% 
  pull(year)

cat("1. **Growth Pattern**: Oceanus Folk shows exponential growth, especially after", peak_year, "\n")
cat("2. **Total Reach**: 305 songs spanning 40 years (1992-2032)\n")
cat("3. **Key Propagators**: Top artists have successfully cross-pollinated with other genres\n\n")
```

### Rising Stars Predictions

```{r predictions-summary}
cat("Top 3 Predicted Rising Stars:\n")
for(i in 1:3) {
  star <- rising_stars[i,]
  cat(i, ". **", ifelse(!is.na(star$stage_name), star$stage_name, star$name), 
      "**: Potential score = ", round(star$potential_score, 2), "\n", sep = "")
}
```

## 6.2 Recommendations

1. **For Record Labels**: Focus on artists with high versatility scores and emerging momentum
2. **For Artists**: Collaborate across genre boundaries to increase influence
3. **For Investors**: Monitor communities 5 and 6 for emerging talent

## 6.3 Limitations

- Limited temporal data for edges prevents full career trajectory analysis
- Genre information missing for many artists
- Prediction model relies on network metrics without content analysis

# 7 Appendix

## 7.1 Data Quality Assessment

```{r data-quality}
quality_metrics <- tibble(
  Metric = c("Nodes with genre info", "Nodes with release dates", 
             "Nodes with stage names", "Edges with temporal data"),
  Count = c(
    sum(!is.na(nodes$genre)),
    sum(!is.na(nodes$release_date)),
    sum(!is.na(nodes$stage_name)),
    0
  ),
  Percentage = round(Count / c(nrow(nodes), nrow(nodes), nrow(nodes), nrow(edges)) * 100, 2)
)

knitr::kable(quality_metrics, caption = "Data Completeness Metrics")
```

## 7.2 Session Info

```{r session-info}
sessionInfo()
```