---
title: "MC1 Analysis - Music Knowledge Graph"
author: "HOPE"
date: today
format: 
  html:
    toc: true
    toc-depth: 3
    theme: cosmo
    self-contained: true
    embed-resources: true
---

# 1 Introduction

This analysis explores the VAST Challenge 2025 MC1 dataset to understand:

1. Sailor Shift's rise to fame and influence network
2. The spread of Oceanus Folk genre globally
3. Prediction of rising stars in the next 5 years

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 10, fig.height = 8)
library(tidyverse)
library(tidygraph)
library(ggraph)
library(visNetwork)
library(plotly)
library(DT)
library(igraph)
library(lubridate)
library(knitr)
source("./R/load_data.R")
source("./R/build_graph.R")
```

# 2 Data Overview

```{r data-summary}
cat("Graph structure:\n")
print(g)

stats <- tibble(
  Metric = c("Total Nodes", "Total Edges", "Number of Communities", "Graph Density", "Average Path Length"),
  Value = c(
    vcount(g),
    ecount(g),
    length(unique(V(g)$community)),
    round(edge_density(g), 4),
    round(mean_distance(g, directed = FALSE), 2)
  )
)

kable(stats, caption = "Graph Statistics")
```

```{r node-type-distribution}
node_dist <- g %>%
  activate(nodes) %>%
  as_tibble() %>%
  count(`Node Type`) %>%
  arrange(desc(n))

p1 <- ggplot(node_dist, aes(x = reorder(`Node Type`, n), y = n, fill = `Node Type`)) +
  geom_col() +
  coord_flip() +
  labs(title = "Distribution of Node Types",
       x = "Node Type",
       y = "Count") +
  theme_minimal() +
  theme(legend.position = "none") +
  geom_text(aes(label = n), hjust = -0.1, size = 3)

print(p1)
```

```{r edge-type-distribution}
edge_dist <- edges %>%
  count(`Edge Type`) %>%
  arrange(desc(n))

p2 <- ggplot(edge_dist, aes(x = reorder(`Edge Type`, n), y = n, fill = `Edge Type`)) +
  geom_col() +
  coord_flip() +
  labs(title = "Distribution of Edge Types",
       x = "Edge Type",
       y = "Count") +
  theme_minimal() +
  theme(legend.position = "none") +
  geom_text(aes(label = n), hjust = -0.1, size = 3)

print(p2)
```

# 3 Sailor Shift Analysis

## 3.1 Sailor Shift's Profile

```{r sailor-identify}
sailor_info <- g %>%
  activate(nodes) %>%
  as_tibble() %>%
  filter(id == 17255)

sailor_edges_data <- edges %>%
  filter(source == 17255 | target == 17255)

cat("Sailor Shift found in the network!\n\n")
cat("Key metrics:\n")
cat("- PageRank:", round(sailor_info$pagerank, 5), "(Rank #1 in network)\n")
cat("- Degree:", sailor_info$degree, "\n")
cat("- Community:", sailor_info$community, "\n")
cat("- Total connections:", nrow(sailor_edges_data), "\n")
cat("- Connection types:\n")
table(sailor_edges_data$`Edge Type`) %>% print()
```

## 3.2 Sailor Shift's Career Timeline

::: {.callout-note}
Sailor Shift's career shows three distinct roles: as a lyricist (2024-2040), performer (2028-2040), and producer, demonstrating exceptional versatility in the Oceanus Folk music scene.
:::

```{r sailor-timeline}
sailor_songs <- edges %>%
  filter(source == 17255 & `Edge Type` %in% c("PerformerOf", "LyricistOf", "ProducerOf")) %>%
  left_join(nodes %>% select(id, name, release_date, genre), by = c("target" = "id")) %>%
  filter(!is.na(release_date)) %>%
  mutate(year = as.numeric(release_date)) %>%
  group_by(year, `Edge Type`) %>%
  summarise(
    count = n(), 
    genres = toString(unique(genre)),
    .groups = "drop"
  )

p <- ggplot(sailor_songs, aes(x = year, y = count, color = `Edge Type`)) +
  geom_line(size = 1.5) +
  geom_point(size = 3) +
  labs(title = "Sailor Shift's Career Timeline",
       subtitle = "Songs performed, lyrics written, and productions per year",
       x = "Year",
       y = "Number of Works") +
  theme_minimal() +
  scale_x_continuous(breaks = seq(2024, 2040, by = 2)) +
  scale_color_manual(values = c("PerformerOf" = "#2E86AB", 
                                "LyricistOf" = "#A23B72",
                                "ProducerOf" = "#F18F01"))

ggplotly(p, tooltip = c("year", "count", "Edge Type"))
```

## 3.3 Collaboration Network Evolution

::: {.callout-note}
Sailor Shift's key collaborators include Seraphina Vale (Cassian Storm) and Jaye Finch (Claire Holmes), both highly influential artists in the Oceanus Folk movement.
:::

```{r sailor-collaboration-evolution}
collaborators <- edges %>%
  filter(source == 17255 | target == 17255) %>%
  mutate(collaborator_id = ifelse(source == 17255, target, source)) %>%
  left_join(nodes %>% select(id, name, stage_name, `Node Type`), 
            by = c("collaborator_id" = "id")) %>%
  filter(`Node Type` == "Person") %>%
  mutate(display_name = coalesce(stage_name, name)) %>%
  left_join(
    g %>% activate(nodes) %>% as_tibble() %>% select(id, collaborator_pagerank = pagerank),
    by = c("collaborator_id" = "id")
  )

key_collaborators <- collaborators %>%
  group_by(collaborator_id, display_name) %>%
  summarise(
    connections = n(),
    edge_types = toString(unique(`Edge Type`)),
    pagerank = first(collaborator_pagerank),
    .groups = "drop"
  ) %>%
  arrange(desc(connections)) %>%
  head(20)

datatable(key_collaborators, 
          caption = "Sailor Shift's Key Collaborators",
          options = list(pageLength = 10))
```

## 3.4 Influence Propagation Analysis

::: {.callout-note}
Sailor Shift is a member of a band with Maya Jensen, Lila "Lilly" Hartman, Jade Thompson, and Sophie Ramirez. Through their 47 works (songs and albums), they connect with 25 other artists in the music network, forming a rich collaborative ecosystem.
:::

```{r sailor-influence-propagation}
# Get Sailor Shift's band members
band_members_ids <- edges %>%
  filter(source == 17255 & `Edge Type` == "MemberOf") %>%
  pull(target) %>%
  {edges %>% filter(target %in% . & `Edge Type` == "MemberOf")} %>%
  pull(source)

# Get artists connected through works (limit to top 15)
sailor_works <- edges %>%
  filter(source == 17255) %>%
  filter(`Edge Type` %in% c("PerformerOf", "LyricistOf", "ProducerOf")) %>%
  pull(target)

connected_artists <- edges %>%
  filter(target %in% sailor_works) %>%
  filter(`Edge Type` %in% c("PerformerOf", "ComposerOf", "ProducerOf")) %>%
  filter(source != 17255) %>%
  count(source) %>%
  arrange(desc(n)) %>%
  head(15) %>%
  pull(source)

# Combine all relevant nodes
network_nodes <- unique(c(17255, band_members_ids, connected_artists))

# Get indices of these nodes in the graph
node_indices <- which(V(g)$id %in% network_nodes)

if(length(node_indices) > 5) {
  # Create subgraph
  sailor_subgraph <- induced_subgraph(g, node_indices)
  
  # Prepare node attributes
  node_attrs <- data.frame(
    id = V(sailor_subgraph)$id,
    name = V(sailor_subgraph)$name,
    stage_name = V(sailor_subgraph)$stage_name,
    pagerank = V(sailor_subgraph)$pagerank
  ) %>%
    mutate(
      display_name = coalesce(stage_name, name),
      node_type = case_when(
        id == 17255 ~ "Sailor Shift",
        id %in% band_members_ids ~ "Band Member",
        TRUE ~ "Collaborator"
      ),
      node_size = case_when(
        id == 17255 ~ pagerank * 10000,
        id %in% band_members_ids ~ pagerank * 7000,
        TRUE ~ pagerank * 5000
      )
    )
  
  # Add attributes to graph
  V(sailor_subgraph)$display_name <- node_attrs$display_name
  V(sailor_subgraph)$node_type <- node_attrs$node_type
  V(sailor_subgraph)$node_size <- node_attrs$node_size
  
  # Convert to tbl_graph
  sailor_tbl <- as_tbl_graph(sailor_subgraph)
  
  # Use better layout
  layout <- layout_with_kk(sailor_tbl)
  
  p <- ggraph(sailor_tbl, layout = layout) +
    geom_edge_link(aes(alpha = 0.6), color = "gray", show.legend = FALSE) +
    geom_node_point(aes(size = node_size, color = node_type)) +
    geom_node_text(aes(label = display_name), 
                   repel = TRUE, size = 3.5, max.overlaps = Inf) +
    scale_color_manual(values = c("Sailor Shift" = "red", 
                                  "Band Member" = "orange", 
                                  "Collaborator" = "lightblue"),
                       name = "Connection Type") +
    scale_size_continuous(range = c(3, 15), guide = "none") +
    labs(title = "Sailor Shift's Musical Network",
         subtitle = "Including band members and artists connected through shared works") +
    theme_graph() +
    theme(legend.position = "bottom",
          plot.background = element_rect(fill = "white", colour = NA))
  
  print(p)
} else {
  cat("Not enough connections to create a meaningful network visualization.\n")
}
```

# 4 Oceanus Folk Influence Analysis

## 4.1 Oceanus Folk Overview

```{r oceanus-overview}
of_nodes <- g %>%
  activate(nodes) %>%
  as_tibble() %>%
  filter(genre == "Oceanus Folk")

cat("Total Oceanus Folk nodes:", nrow(of_nodes), "\n")
cat("By type:\n")
of_nodes %>%
  count(`Node Type`) %>%
  kable()

of_artists <- edges %>%
  filter(`Edge Type` %in% c("PerformerOf", "ComposerOf")) %>%
  inner_join(of_nodes %>% select(id), by = c("target" = "id")) %>%
  count(source) %>%
  arrange(desc(n)) %>%
  left_join(nodes %>% select(id, name, stage_name), by = c("source" = "id")) %>%
  mutate(artist_name = coalesce(stage_name, name)) %>%
  head(10)

cat("\nTop 10 Oceanus Folk Artists:\n")
kable(of_artists %>% select(artist_name, n))
```

## 4.2 Temporal Spread Analysis

::: {.callout-important}
Oceanus Folk experienced its biggest surge in 2023 with 34 new songs, followed by another peak in 2026 (25 songs). The genre shows volatile but persistent growth, with recent years (2025-2040) averaging 8.7 songs per year despite high volatility.
:::

```{r oceanus-temporal-advanced}
of_temporal <- nodes %>%
  filter(genre == "Oceanus Folk", !is.na(release_date)) %>%
  mutate(year = as.numeric(release_date)) %>%
  group_by(year) %>%
  summarise(
    songs_released = n(),
    notable_songs = sum(notable, na.rm = TRUE)
  ) %>%
  arrange(year) %>%
  mutate(
    cumulative_songs = cumsum(songs_released),
    growth_rate = (songs_released - lag(songs_released)) / lag(songs_released) * 100
  )

p1 <- ggplot(of_temporal, aes(x = year)) +
  geom_area(aes(y = cumulative_songs), fill = "lightblue", alpha = 0.7) +
  geom_line(aes(y = cumulative_songs), color = "darkblue", size = 1.5) +
  geom_point(aes(y = cumulative_songs, size = notable_songs), color = "darkblue") +
  labs(title = "Oceanus Folk Genre Evolution",
       subtitle = "Cumulative growth with notable releases highlighted",
       x = "Year",
       y = "Cumulative Number of Songs",
       size = "Notable Songs") +
  theme_minimal() +
  scale_x_continuous(breaks = seq(1990, 2040, by = 5))

ggplotly(p1)

# Fix fill parameter issue
of_temporal_filtered <- of_temporal %>% filter(!is.na(growth_rate))

p2 <- ggplot(of_temporal_filtered, aes(x = year, y = growth_rate)) +
  geom_col(aes(fill = growth_rate > 0)) +
  scale_fill_manual(values = c("TRUE" = "green", "FALSE" = "red"), guide = "none") +
  geom_hline(yintercept = 0, linetype = "dashed") +
  labs(title = "Oceanus Folk Growth Rate by Year",
       x = "Year",
       y = "Growth Rate (%)") +
  theme_minimal()

print(p2)
```

## 4.3 Genre Cross-Pollination Network

::: {.callout-note}
Oceanus Folk artists frequently cross into other genres, particularly Dream Pop and Indie Folk, showing the genre's versatility and mainstream appeal. This cross-pollination is key to its global spread.
:::

```{r genre-network}
genre_connections <- edges %>%
  filter(`Edge Type` %in% c("PerformerOf", "ComposerOf")) %>%
  left_join(nodes %>% select(id, source_genre = genre), by = c("source" = "id")) %>%
  left_join(nodes %>% select(id, target_genre = genre), by = c("target" = "id")) %>%
  filter(!is.na(source_genre) & !is.na(target_genre) & source_genre != target_genre) %>%
  count(source_genre, target_genre) %>%
  filter(n > 5)

of_connections <- genre_connections %>%
  filter(source_genre == "Oceanus Folk" | target_genre == "Oceanus Folk") %>%
  mutate(
    from = source_genre,
    to = target_genre,
    value = n
  )

if(nrow(of_connections) > 0) {
  nodes_vis <- data.frame(
    id = unique(c(of_connections$from, of_connections$to)),
    label = unique(c(of_connections$from, of_connections$to)),
    color = ifelse(unique(c(of_connections$from, of_connections$to)) == "Oceanus Folk", "red", "lightblue")
  )
  
  edges_vis <- of_connections %>%
    select(from, to, value)
  
  visNetwork(nodes_vis, edges_vis) %>%
    visOptions(highlightNearest = TRUE) %>%
    visEdges(arrows = "to", smooth = TRUE) %>%
    visLayout(randomSeed = 123) %>%
    visPhysics(stabilization = FALSE)
  
  # Add text description
  cat("\nTop genre connections with Oceanus Folk:\n")
  of_connections %>%
    arrange(desc(value)) %>%
    head(5) %>%
    mutate(connection = paste(from, "to", to)) %>%
    select(connection, value) %>%
    kable(col.names = c("Genre Connection", "Number of Artists"))
}
```

## 4.4 Key Propagators of Oceanus Folk

```{r oceanus-propagators}
of_song_ids <- of_nodes$id

propagators <- edges %>%
  filter(target %in% of_song_ids & `Edge Type` %in% c("PerformerOf", "ComposerOf")) %>%
  count(source) %>%
  arrange(desc(n)) %>%
  left_join(
    g %>% activate(nodes) %>% as_tibble() %>% 
    select(id, name, stage_name, pagerank, degree, community),
    by = c("source" = "id")
  ) %>%
  filter(!is.na(pagerank)) %>%
  mutate(
    display_name = coalesce(stage_name, name),
    influence_score = n * pagerank * 1000,
    propagator_rank = row_number()
  ) %>%
  head(20)

p <- ggplot(propagators, aes(x = reorder(display_name, influence_score), y = influence_score)) +
  geom_col(aes(fill = as.factor(community))) +
  coord_flip() +
  labs(title = "Top 20 Oceanus Folk Propagators",
       subtitle = "Based on number of OF songs × PageRank",
       x = "Artist",
       y = "Influence Score",
       fill = "Community") +
  theme_minimal()

print(p)
```

# 5 Rising Stars Prediction

## 5.1 Feature Engineering for Prediction

```{r feature-engineering}
# Get artists active after 2030
recent_artist_ids <- edges %>%
  left_join(nodes %>% select(id, release_date), by = c("target" = "id")) %>%
  filter(!is.na(release_date)) %>%
  mutate(year = as.numeric(release_date)) %>%
  filter(year >= 2030) %>%
  pull(source) %>%
  unique()

# Build artist features
artist_features <- nodes %>%
  filter(`Node Type` == "Person", id %in% recent_artist_ids) %>%
  left_join(
    edges %>%
      group_by(source) %>%
      summarise(
        total_works = n(),
        work_types = n_distinct(`Edge Type`),
        performer_count = sum(`Edge Type` == "PerformerOf"),
        composer_count = sum(`Edge Type` == "ComposerOf"),
        .groups = "drop"
      ),
    by = c("id" = "source")
  ) %>%
  left_join(
    g %>% activate(nodes) %>% as_tibble() %>%
      select(id, pagerank, degree, community),
    by = "id"
  ) %>%
  replace_na(list(total_works = 0, work_types = 0, performer_count = 0, composer_count = 0)) %>%
  mutate(
    display_name = coalesce(stage_name, name),
    has_stage_name = !is.na(stage_name),
    versatility_score = work_types * sqrt(total_works),
    career_stage = case_when(
      total_works == 0 ~ "Inactive",
      total_works < 5 ~ "Emerging",
      total_works < 20 ~ "Established",
      TRUE ~ "Veteran"
    )
  )
```

## 5.2 Predictive Model

::: {.callout-important}
Our model identifies artists with recent momentum (post-2030 activity) who haven't yet reached superstar status (PageRank < 0.0002, approximately below top 2% of all artists). The top rising stars combine versatility, network connections, and consistent output.
:::

```{r prediction-model}
rising_stars <- artist_features %>%
  filter(
    !is.na(pagerank),
    pagerank < 0.0002,  # Not yet superstars (below top 2%)
    total_works > 0     # Active artists
  ) %>%
  mutate(
    potential_score = pagerank * degree * 1000
  ) %>%
  arrange(desc(potential_score)) %>%
  head(20)

datatable(
  rising_stars %>% 
    select(display_name, career_stage, total_works, work_types,
           degree, potential_score) %>%
    mutate(across(where(is.numeric), ~round(., 3))),
  caption = "Top 20 Predicted Rising Stars (2030-2040)",
  options = list(pageLength = 10)
)
```

## 5.3 Rising Stars Characteristics

```{r rising-stars-analysis}
p1 <- ggplot(rising_stars %>% head(10), 
             aes(x = degree, y = versatility_score)) +
  geom_point(aes(size = potential_score, color = career_stage), alpha = 0.7) +
  geom_text(aes(label = display_name), 
            check_overlap = TRUE, size = 3, vjust = -1, max.overlaps = Inf) +
  labs(title = "Rising Stars: Network Degree vs Versatility",
       x = "Network Degree (Connections)",
       y = "Versatility Score",
       size = "Potential Score",
       color = "Career Stage") +
  theme_minimal()

ggplotly(p1, tooltip = c("display_name", "degree", "versatility_score"))

community_dist <- rising_stars %>%
  count(community) %>%
  arrange(desc(n))

p2 <- ggplot(community_dist, aes(x = reorder(community, n), y = n, fill = as.factor(community))) +
  geom_col() +
  coord_flip() +
  labs(title = "Rising Stars by Community",
       x = "Community",
       y = "Count") +
  theme_minimal() +
  theme(legend.position = "none")

print(p2)
```

## 5.4 Validation: Historical Success Patterns

```{r validation}
successful_artists <- nodes %>%
  filter(`Node Type` == "Person") %>%
  left_join(
    g %>% activate(nodes) %>% as_tibble() %>%
      select(id, pagerank, degree),
    by = "id"
  ) %>%
  filter(!is.na(pagerank), pagerank > 0.0002) %>%
  left_join(
    edges %>%
      group_by(source) %>%
      summarise(
        total_works = n(),
        work_types = n_distinct(`Edge Type`),
        .groups = "drop"
      ),
    by = c("id" = "source")
  ) %>%
  replace_na(list(total_works = 0, work_types = 0)) %>%
  mutate(
    success_category = "Successful",
    has_stage_name = !is.na(stage_name)
  )

comparison_data <- bind_rows(
  successful_artists %>% select(success_category, total_works, work_types, degree, has_stage_name),
  rising_stars %>% mutate(success_category = "Rising") %>% 
    select(success_category, total_works, work_types, degree, has_stage_name)
)

p <- comparison_data %>%
  pivot_longer(cols = c(total_works, work_types, degree), 
               names_to = "metric", 
               values_to = "value") %>%
  ggplot(aes(x = success_category, y = value, fill = success_category)) +
  geom_boxplot() +
  facet_wrap(~metric, scales = "free_y") +
  labs(title = "Comparing Rising Stars with Successful Artists",
       x = "Category",
       y = "Value") +
  theme_minimal() +
  theme(legend.position = "none")

print(p)
```

# 6 Insights and Conclusions

## 6.1 Key Findings

```{r findings-setup, include=FALSE}
# Prepare data for findings
peak_years <- of_temporal %>% 
  filter(songs_released == max(songs_released)) %>%
  pull(year)

peak_info <- if(length(peak_years) > 1) {
  paste(peak_years, collapse = " and ")
} else {
  as.character(peak_years)
}

total_growth <- of_temporal %>%
  filter(year %in% c(2020, 2040)) %>%
  pull(cumulative_songs)

growth_factor <- if(length(total_growth) == 2) {
  round(total_growth[2] / total_growth[1], 1)
} else {
  "N/A"
}
```

### Sailor Shift's Success Factors

```{r sailor-summary, results='asis'}
findings_sailor <- tibble(
  Finding = c(
    paste0("Network Position: Sailor Shift has the highest PageRank (", round(sailor_info$pagerank, 5), ") in the entire network"),
    paste0("Collaboration Strategy: Connected to ", sailor_info$degree, " other nodes through diverse relationship types"),
    "Career Evolution: Triple role as lyricist (since 2024), performer (since 2028), and producer",
    "Band Membership: Part of a 5-member band with Maya Jensen, Lila Hartman, Jade Thompson, and Sophie Ramirez",
    "Work Network: Connected to 25 other artists through shared songs and albums"
  )
)

for(i in 1:nrow(findings_sailor)) {
  cat(paste0(i, ". <b>", findings_sailor$Finding[i], "</b><br>\n"))
}
```

### Oceanus Folk Global Spread

```{r oceanus-summary, results='asis'}
findings_oceanus <- tibble(
  Finding = c(
    paste0("Growth Pattern: Oceanus Folk peaked in ", peak_info, " with 34 new releases"),
    "Total Reach: 305 songs spanning 40 years (1992-2040)",
    paste0("Recent Growth: From 2020 to 2040, the genre grew by ", growth_factor, " times"),
    "Cross-Genre Influence: Strong connections with Dream Pop and Indie Folk"
  )
)

for(i in 1:nrow(findings_oceanus)) {
  cat(paste0(i, ". <b>", findings_oceanus$Finding[i], "</b><br>\n"))
}
```

### Rising Stars Predictions

```{r predictions-summary, results='asis'}
cat("<b>Top 5 Predicted Rising Stars (2030-2040):</b><br><br>\n")
for(i in 1:min(5, nrow(rising_stars))) {
  star <- rising_stars[i,]
  cat(paste0(i, ". <b>", star$display_name, "</b>: Potential score = ", 
             round(star$potential_score, 2), " (", star$career_stage, ")<br>\n"))
}
```

## 6.2 Recommendations

```{r recommendations, results='asis'}
recommendations <- tibble(
  Target = c("For Record Labels", "For Artists", "For Investors", "Genre Strategy"),
  Recommendation = c(
    "Focus on artists like Andrew Williams and Brian Wright who show high network connectivity",
    "Follow Sailor Shift's model - combine multiple roles (performer, lyricist, producer) for maximum impact",
    "Monitor Communities 1 and 2 where most rising stars are concentrated",
    "Oceanus Folk artists should consider cross-genre collaborations, especially with Dream Pop"
  )
)

for(i in 1:nrow(recommendations)) {
  cat(paste0(i, ". <b>", recommendations$Target[i], "</b>: ", recommendations$Recommendation[i], "<br>\n"))
}
```

## 6.3 Limitations

```{r limitations, results='asis'}
limitations <- c(
  "Limited temporal data for edges prevents full career trajectory analysis",
  "Genre information missing for 73.5% of nodes",
  "Prediction model relies on network metrics without content analysis",
  "Only 3% of artists have stage names, limiting brand analysis"
)

for(i in 1:length(limitations)) {
  cat(paste0("- ", limitations[i], "<br>\n"))
}
```

# 7 Appendix

## 7.1 Data Quality Assessment

```{r data-quality}
quality_metrics <- tibble(
  Metric = c("Nodes with genre info", "Nodes with release dates", 
             "Nodes with stage names", "Edges with temporal data"),
  Count = c(
    sum(!is.na(nodes$genre)),
    sum(!is.na(nodes$release_date)),
    sum(!is.na(nodes$stage_name)),
    0
  ),
  Percentage = round(Count / c(nrow(nodes), nrow(nodes), nrow(nodes), nrow(edges)) * 100, 2)
)

kable(quality_metrics, caption = "Data Completeness Metrics")
```

## 7.2 Session Info

```{r session-info}
sessionInfo()
```